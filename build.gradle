buildscript {
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'groovy'
    id 'idea'
    id 'scala'
    id 'java-library'
    id 'jacoco'
    id "org.springframework.boot" version "${springBootVersion}"
    id "com.github.ben-manes.versions" version "${gradleVersionsPlugin}"
}

apply from: "test.gradle"

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}



//compileJava {
//    options.annotationProcessorPath = configurations.annotationProcessor
//}

wrapper {
    gradleVersion="${gradleVersion}"
}

dependencies {
    //Scala
    implementation("org.scala-lang:scala-library:${scalaVersion}")

    //Spring Boot
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")

    //Camel
    //implementation("org.apache.camel:camel-core:${apacheCamelVersion}")

    //excel
//    implementation("org.apache.poi:poi:${poiVersion}")
//    implementation("org.apache.poi:poi-ooxml:${poiVersion}")

    //postgres
    //runtimeOnly("org.postgresql:postgresql:${postgresqlVersion}")

    //h2 database
    runtimeOnly("com.h2database:h2:${h2Version}")

    //hibernate
    implementation("org.hibernate:hibernate-core:${hibernateVersion}")

    //Logging
    implementation("ch.qos.logback:logback-classic:${logbackVersion}")

    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    //annotationProcessor("org.projectlombok:lombok:${lombokVersion}")

    //testing modules
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testImplementation("org.spockframework:spock-core:${spockVersion}")
    testImplementation("org.spockframework:spock-spring:${spockVersion}")
    testImplementation("org.testcontainers:spock:${testContainersVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar { duplicatesStrategy = DuplicatesStrategy.EXCLUDE }
